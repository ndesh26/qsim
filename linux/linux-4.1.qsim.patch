From 75746587c94d01a1b3beef61d2f01dde3e108c41 Mon Sep 17 00:00:00 2001
From: Pranith Kumar <bobby.prani@gmail.com>
Date: Tue, 8 Dec 2015 13:57:13 -0500
Subject: [PATCH] Qsim specific changes to the linux kernel

* Enable qsim to track process pids and tids
* Enable qsim to track CPU boot

Signed-off-by: Pranith Kumar <bobby.prani@gmail.com>
Signed-off-by: Nayan Deshmukh <nayan26deshmukh@gmail.com>
---
 arch/arm64/include/asm/mmu_context.h |  6 +++++-
 arch/arm64/kernel/smp.c              |  8 ++++++--
 arch/x86/kernel/smpboot.c            | 10 ++++++++++
 kernel/sched/core.c                  | 26 ++++++++++++++++++++++++++
 4 files changed, 47 insertions(+), 3 deletions(-)

diff --git a/arch/arm64/include/asm/mmu_context.h b/arch/arm64/include/asm/mmu_context.h
index 8ec41e5..a8ac574 100644
--- a/arch/arm64/include/asm/mmu_context.h
+++ b/arch/arm64/include/asm/mmu_context.h
@@ -35,6 +35,8 @@ extern unsigned int cpu_last_asid;
 void __init_new_context(struct task_struct *tsk, struct mm_struct *mm);
 void __new_context(struct mm_struct *mm);
 
+extern void do_cpuid(uint32_t val);
+
 #ifdef CONFIG_PID_IN_CONTEXTIDR
 static inline void contextidr_thread_switch(struct task_struct *next)
 {
@@ -42,7 +44,9 @@ static inline void contextidr_thread_switch(struct task_struct *next)
 	"	msr	contextidr_el1, %0\n"
 	"	isb"
 	:
-	: "r" (task_pid_nr(next)));
+	: "r" (task_tgid_nr(next)));
+
+	do_cpuid(0xc75c0000 | (u16)task_tgid_nr(next));
 }
 #else
 static inline void contextidr_thread_switch(struct task_struct *next)
diff --git a/arch/arm64/kernel/smp.c b/arch/arm64/kernel/smp.c
index edf73a6..fa35c46 100644
--- a/arch/arm64/kernel/smp.c
+++ b/arch/arm64/kernel/smp.c
@@ -76,10 +76,14 @@ enum ipi_msg_type {
  */
 static int boot_secondary(unsigned int cpu, struct task_struct *idle)
 {
+	int ret = -EOPNOTSUPP;
 	if (cpu_ops[cpu]->cpu_boot)
-		return cpu_ops[cpu]->cpu_boot(cpu);
+		ret = cpu_ops[cpu]->cpu_boot(cpu);
 
-	return -EOPNOTSUPP;
+	if (ret != -EOPNOTSUPP)
+		asm("msr pmcr_el0, %0\n"::"r"(cpu | 0xb0070000));
+
+	return ret;
 }
 
 static DECLARE_COMPLETION(cpu_running);
diff --git a/arch/x86/kernel/smpboot.c b/arch/x86/kernel/smpboot.c
index 50e547e..11af828 100644
--- a/arch/x86/kernel/smpboot.c
+++ b/arch/x86/kernel/smpboot.c
@@ -552,11 +552,19 @@ wakeup_secondary_cpu_via_nmi(int apicid, unsigned long start_eip)
 	return (send_status | accept_status);
 }
 
+/* Use magic instruction to boot other CPUs. */
+static inline void QSIM_BOOTSTRAP(u16 cpu)
+{
+	asm volatile("mov %0, %%eax;\n cpuid;\n" :: "r"(0xb0070000 | cpu) :
+		     "%eax", "%ebx", "%edx", "%ecx");
+}
+
 static int
 wakeup_secondary_cpu_via_init(int phys_apicid, unsigned long start_eip)
 {
 	unsigned long send_status, accept_status = 0;
 	int maxlvt, num_starts, j;
+	static u16 cur_cpu = 1;
 
 	maxlvt = lapic_get_maxlvt();
 
@@ -594,6 +602,8 @@ wakeup_secondary_cpu_via_init(int phys_apicid, unsigned long start_eip)
 	pr_debug("Waiting for send to finish...\n");
 	send_status = safe_apic_wait_icr_idle();
 
+	QSIM_BOOTSTRAP(cur_cpu++);
+
 	mb();
 	atomic_set(&init_deasserted, 1);
 
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 6cb5f00..7c88d44 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -2315,6 +2315,16 @@ asmlinkage __visible void schedule_tail(struct task_struct *prev)
 		put_user(task_pid_vnr(current), current->set_child_tid);
 }
 
+void do_cpuid(uint32_t val)
+{
+#if defined(__aarch64__)
+	asm volatile("msr pmcr_el0, %0" :: "r" (val));
+#else
+	asm("cpuid;\n":: "a"(val) : "%ebx", "%ecx", "%edx");
+#endif
+}
+EXPORT_SYMBOL(do_cpuid);
+
 /*
  * context_switch - switch to the new MM and the new thread's register state.
  */
@@ -2324,6 +2334,22 @@ context_switch(struct rq *rq, struct task_struct *prev,
 {
 	struct mm_struct *mm, *oldmm;
 
+	/* tell qsim the pid of the next task or that it is idle
+	 */
+	if (IS_ENABLED(CONFIG_X86) || IS_ENABLED(CONFIG_ARM64)) {
+		if (next == rq->idle)
+			do_cpuid(0x1d1e1d1e);
+		else {
+                        uint32_t val = 0xc75c0000 | (u16)task_tgid_nr(next);
+#if defined(__aarch64__)
+	                asm volatile("msr pmcr_el0, %0" :: "r" (val));
+#else
+                        uint32_t tid = 0x00000000 | (u16)task_pid_nr(next);
+	                asm("cpuid;\n":: "a"(val), "b"(tid) : "%ecx", "%edx");
+#endif
+	        }
+        }
+
 	prepare_task_switch(rq, prev, next);
 
 	mm = next->mm;
-- 
1.9.1

